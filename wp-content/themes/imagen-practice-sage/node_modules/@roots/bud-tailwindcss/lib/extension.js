import { __decorate } from "tslib";
import { Extension } from '@roots/bud-framework/extension';
import { bind, dependsOn, label, } from '@roots/bud-framework/extension/decorators';
/**
 * TailwindCSS support for `@roots/bud`
 *
 * @public
 * @decorator `@label`
 * @decorator `@dependsOn`
 */
let BudTailwindCss = class BudTailwindCss extends Extension {
    /**
     * `register` callback
     *
     * @public
     * @decorator `@bind`
     */
    async register() {
        try {
            const tailwindcss = await this.resolve('tailwindcss');
            const nesting = await this.resolve('tailwindcss/nesting/index.js');
            this.app.postcss.setPlugins({ nesting, tailwindcss });
            this.logger.success('postcss configured for tailwindcss');
        }
        catch (message) {
            this.logger.error(message);
        }
    }
};
__decorate([
    bind
], BudTailwindCss.prototype, "register", null);
BudTailwindCss = __decorate([
    label('@roots/bud-tailwindcss'),
    dependsOn(['@roots/bud-postcss'])
], BudTailwindCss);
export default BudTailwindCss;
//# sourceMappingURL=extension.js.map